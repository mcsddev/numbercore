@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<script id="number-template" type="text/x-handlebars-template">
    <h4 class="text-muted text-center">Numbers</h4>
    <div class="card-group">
        {{#each Numbers}}
        <div class="card">
            <div class="card-body">
                <h4 class="number">{{this}}</h4>
            </div>
        </div>
        {{/each}}
    </div>
</script>


<div class="row">
    <div class="col-sm-9">

        <div id="connect-area" class="mt-md-5" style="display: none;">
            <h1>Number Core</h1>
            <small class="form-text text-muted">
                Enter name and connect to the game server.
            </small>
            <form id="joingame">
                <div class="row">
                    <div class="col-md-6">
                        <div class="input-group">
                            <input type="text" id="name" class="form-control" placeholder="Name" />
                            <span class="input-group-btn">
                                <input type="submit" id="join" value="Join" class="join btn btn-outline-primary" />
                            </span>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <div id="game-area">
            <div class="numbers"></div>
            <div class="row">
                <div class="col-sm-9">
                    <div class="row justify-content-center">
                        <div class="col-md-3">
                            <div class="text-center">
                                <h4 class="text-muted">Target</h4>
                                <h1 class="text-info target-view">0</h1>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h4 class="text-muted">Answer</h4>
                                <h1 class="text-success answer-view">0</h1>
                            </div>
                        </div>
                    </div>
                    <div id="slidecontainer">
                        <input type="range" min="1" max="100" value="50" class="slider text-info" id="answer">
                    </div>
                    <a href="#" class="btn btn-lg btn-outline-info btn-block mt-2">
                        Submit Answer
                    </a>
                </div>
                <div class="col-sm-3">
                    <div class="item html">
                        <h2>30</h2>
                        <svg width="160" height="160" xmlns="http://www.w3.org/2000/svg">
                            <g>
                                <title>Layer 1</title>
                                <circle id="circle" class="circle_animation" r="69.85699" cy="81" cx="81" stroke-width="30" stroke="#17a2b8" fill="none" />
                            </g>
                        </svg>
                    </div>
                </div>
            </div>

        </div>
    </div>
    <div class="col-sm-3">
        <div class="card text-center">
            <div class="card-header">
                <ul class="nav nav-tabs card-header-tabs">
                    <li class="nav-item">
                        <a class="nav-link active" href="#">Chat</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link disabled" href="#">Users</a>
                    </li>
                </ul>
            </div>
            <div class="card-body message-container">
                <ul class="list-group list-group-flush" id="messages"></ul>
            </div>
            <div class="card-footer bg-transparent border-success">
                <form id="sendmessage">
                    <div class="input-group">
                        <input type="text" id="message" name="message" class="form-control" />
                        <span class="input-group-btn">
                            <input type="submit" id="send" value="Send" class="send btn btn-success" disabled />
                        </span>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
        

@section scripts{

    <script>

        var time = 30;
        var initialOffset = '440';
        var i = 30

        var puzzle = {
            Numbers: [25, 100, 3, 4, 15, 7],
            Target: 342
        };

        var isConnected = false;
        let transportType = signalR.TransportType.WebSockets;
        let logger = new signalR.ConsoleLogger(signalR.LogLevel.Information);
        let http = new signalR.HttpConnection(`http://${document.location.host}/game`, { transport: transportType, logger: logger });
        let connection = new signalR.HubConnection(http, logger);
        
        var numberTemplate = Handlebars.compile($("#number-template").html());
        
        $("#sendmessage").on("submit", e => {
            e.preventDefault();
            if (isConnected) {
                connection.invoke('Send', $("#message").val())
                    .then(function () {
                        $("#sendmessage")[0].reset();
                    })
                    .catch(err => appendLine(err, 'red'));
            }
            else {
                appendLine("Connection is not active", 'red')
            }
        });

        $("#message").on("keyup", e => {
            $("#sendmessage :submit").attr("disabled", $(e.currentTarget).val().length < 1)
        });

        $("#joingame").on("submit", e => {
            e.preventDefault();
            let name = document.getElementById('name').value;
            connection.start()
                .then(function () {
                    isConnected = true;
                    appendLine('Connected successfully', 'green');
                    $("#game-area").show();
                    $("#connect-area").hide();
                })
                .catch(err => appendLine(err, 'red'));
        });

        $("#answer").on("input", e => {
            $(".answer-view").text($(e.currentTarget).val());
        });        

        connection.onClosed = e => {
            if (e) {
                appendLine('Connection closed with error: ' + e, 'red');
            }
            else {
                appendLine('Disconnected', 'green');
            }
        };

        connection.on('SetUsersOnline', usersOnline => {
            usersOnline.forEach(user => addUserOnline(user));
        });

        connection.on('UsersJoined', users => {
            users.forEach(user => {
                appendLine('User ' + user.Name + ' joined the chat');
                addUserOnline(user);
            });
        });

        connection.on('UsersLeft', users => {
            users.forEach(user => {
                appendLine('User ' + user.Name + ' left the chat');
                document.getElementById(user.ConnectionId).outerHTML = '';
            });
        });

        connection.on('Send', (userName, message) => {
            let element = $("<li />")
                .addClass("list-group-item text-right text-info")
                .text(userName);
            $("#messages").append(element);
        });
        
        function appendLine(line, color) {
            let element = $("<li />")
                .addClass("list-group-item text-left")
                .text(line);
            if (color) {
                element.addClass(color);
            }
            $("#messages").append(element);
        };

        function addUserOnline(user) {
            if (document.getElementById(user.ConnectionId)) {
                return;
            }
            var userLi = document.createElement('li');
            userLi.innerText = `${user.Name} (${user.ConnectionId})`;
            userLi.id = user.ConnectionId;
            document.getElementById('users').appendChild(userLi);
        }
        
        function startGame() {
            $(".numbers").html(numberTemplate(puzzle));
            $("#answer").attr("min", puzzle.Target - 10);
            $("#answer").attr("max", puzzle.Target + 10);
            $("#answer").val(puzzle.Target);
            $(".target-view").text(puzzle.Target);
            $(".answer-view").text(puzzle.Target);


            /* Need initial run as interval hasn't yet occured... */
            $('.circle_animation').css('stroke-dashoffset', initialOffset - (1 * (initialOffset / time)));

            var interval = setInterval(function () {
                $('h2').text(i);
                if (i == 0) {
                    clearInterval(interval);
                    return;
                }
                $('.circle_animation').css('stroke-dashoffset', initialOffset - ((i - 1) * (initialOffset / time)));
                i--;
            }, 1000);
        };
        startGame();



</script>
}